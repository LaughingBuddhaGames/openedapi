FORMAT: 1A
HOST: https://partner.opened.com

# OpenEd Partner API

OpenEd is the world's largest educational resource catalog, with over a million videos, games, assessments, homework, and lesson plans. It is the only site completely focused on aligning educational resources to standards.

The **OpenEd Partner API** lets you use the capabilities of the OpenEd engine to find resources and provide information about educational standards (Common Core and otherwise) inside your own apps and websites.

All API access is over HTTPS, and accessed from the https://partner.opened.com host. All data is sent and received as JSON.

All API calls require an OpenEd Access Token. Please write to us at api@opened.com to receive a Client ID and Secret which will allow you to generate an Access Token.

## Feedback and Support
* If you find errors or problems with this documentation, please open a [GitHub issue](https://github.com/openedinc/openedapi/issues/new) with details and information to reproduce the problem. Please note that the GitHub issue database is open to the public, so do not put sensitive information there.
* If you have questions about using this API or about use cases not described here, please feel free to contact us at api@opened.com.

# Requesting Credentials

Email us at api@opened.com to request access to the Opened Partner API and to receive a Client ID and Secret.   

# Group Accounts

## Access Token [/1/oauth/get_token]

### Getting your Access Token [POST]

To use the OpenEd API you will first need to create an account to receive your ACCESS_TOKEN. Your ACCESS_TOKEN will be sent in the header
of all subsequent API requests.

+ Request (application/json)


  + Attributes
  
        + client_id (required, string) - your opened client id
        + secret (required, string) - your opened secret
        + username (required, string) - chosen by you and will serve as the username of your account.
      

+ Response 200

        {
            "access_token": "TOKEN",
            "expires_in":7200,
        }

# Group User

## Search for a User [/1/users/search?{username}]

### Search [GET]

You can get a user object by email or username

+ Request (application/json)

     + Headers 
  
            Authorization: Bearer TOKEN


+ Parameters
    + username: `testuser` (required) - The username or email of the user.
       
        
+ Response 200

        
        {
            "user":{
                "id":16372,
                "first_name":"New Student",
                "last_name":"1",
                "full_name": "New Student 1",
                "email": "user_email",
                "role": "student",
                "username":"student2",
                
            }
        }

+ Response 400

        {
            "error": "error message"
        }

## Create a User [/1/users]

### Create [POST]

You can create other accounts to be used later.  These accounts must be created with an email and password. You can also specify role as 'teacher' or 'student'.  By default, a teacher user will be created.

+ Request (application/json)


  + Attributes
        + email: email (required)
        + password: user_password (required)
        + role: teacher or student  (string, optional)
        + promo: promo code (string, optional)
        + school_nces_id: NCES_ID (string, optional)
        + client_id: yourclientid (required)
       
  + Headers 
  
            Authorization: Bearer TOKEN
        
+ Response 200

        
        {
            "user":{
                "id":16372,
                "first_name":"New Student",
                "last_name":"1",
                "full_name": "New Student 1",
                "email": "user_email",
                "role": "teacher",
                "username":"student2",
                
            }
        }

+ Response 400

        {
            "error": "error message"
        }


# Group Resources


## Search Resources [/1/resources.json{?descriptive,url,limit,offset,standard_group,category,standard,area,subject,grades_range,grade_group,publisher,resource_types,contribution_name,license,enable_lrmi}]

Search OpenEd's resource catalog using one or more of the parameters below.
### Search [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer TOKEN

+ Parameters
    + descriptive: `World War II` (optional, string) - Perform full text search.
    + limit: `10` (optional, number) - Number of resources to return 50 is max.
    + offset: `0` (optional, number) - Pagination offset. Should be a multiple of limit.
    + standard_group: `2` (optional, number) - looks for resources aligned with specified standards in the standard group by standard group ID.
    + grade_group: `46` (optional, number) - looks for resources aligned with specified standards in the grade group by grade group ID.
    + category: `12` (optional, number) -  looks for resources aligned with specified standards are in the category by category id.
    + standard: `K.G.2` (optional, string) - looks for resources aligned with specified standard by standard.identifier (the Common Core ID).
    + area: `11` (optional, number) - looks for resources assigned with specified area (and/or with specified subjects of area) by area id.
    + subject: `110` (optional, number) - looks for resources assigned with specified subject by subject id.
    + grades_range: `K-5` (optional, string) - restricts search to specified grades range. Can be specified as a single grade.
    + publisher: `BrightStorm` (optional, string/array) -  looks for resources from the publisher(s) by publisher title(s). Can be specified as single entry, comma-seprated list of titles or a URL-formatted array.
    + resource_type: `video` (optional, string/array) - looks for resources with specific type. Possible types are: "video", "game", "assessment", "homework", "question", "audio", "other", "lesson plan"(lesson plan should be sent with underscore between lesson and plan). Can be specified as single entry, comma-seprated list of types or a URL-formatted array.
    + url: `http://youtube_video.com` (optional, string) - the underlying url of the resource
    + contribution_name: `LearningRegistry` (optional, string) - the place where the resource was contributed from. Not neccessarily the publisher.
    + license: `free, premium, paid, all` (optional, string) - the resource license type
    + enable_lrmi: `true` (optional, boolean) - if set to true returns metada to lrmi specification
    
+ Response 200 (application/json)

        {
          "meta":
          {
            "pagination":
              {
                "offset":0,
                "total_entries":258213,
                "entries":1,
                "limit":1
              }
          },
          "resources": [
            {
              "standard_ids": [1, 2],
              "standard_idents": [
                "K.G.2",
                "K.G.3"
              ],
              "area_ids": [1,3],
              "subject_ids": [2,4],
              "grade_idents": [
                "K",
                "1"
              ],
              "grades_range": "K-5",
              "is_premium": false
              "publisher": "Mr. Smith",
              "description": "Mr. Smith sings a cute song to teach kids 3D shapes. He helps build real world connections while students learn the cube, rectangular prism, cylinder, sphere, and pyramid. This is a good resource to help introduce and/or review this important skill.",
              "featured": false,
              "effectiveness": 88,
              "resource_type": "video",
              "id": 178375,
              "thumbnails": {
                "mini": "https://mini_thumb/default.jpg",
                "small": "https://small_thumb/default.jpg",
                "medium": "https://medium_thumb/default.jpg",
                "large": "https://large_thumb/default.jpg"
                },
              "title": "Teacher Tipster-3D Shapes Song-Teaching 3 Dimensional Shapes",
              "share_url": "https://www.opened.com/resources/178375?partner_id1&simplifiedView=true",
              "student_url": "https://www.opened.com/resources/383255?partner_id=id&simplifiedView=true&student_view=true",
              "rating": 4,
              "duration": 130,
              "use_rights_url":"https://creativecommons.org/licenses"
            }
          ]
        }

       
+ Response 201 (application/json)
    If enable_lrmi is set to true your response will be specficed to lrml
    
    + Body

            "total_pages": 200,
            "current_page": 0,
            "resources": [
            {
              "resource_id": 178375,
              "name": "Learing about Parcc",
              "effectiveness": 88,
              "educationalAlignment": [
                {
                    targetName: "PARCC.ELA.RV3.1",
                    alignmentType: 'teachers',
                    educationalFramework: "PARCC Common Core ELA/Literacy Summative Assessments",
                    targetDescription: "Use units as a way to understand problems",
                    targetUrl: "https://common_core_ela_material.com
              ],
              "publisher": "Mr. Smith",
              "author": "Mr. Smith",
              "description": "Mr. Smith sings a cute song to teach kids 3D shapes. He helps build real world connections while students learn the cube, rectangular prism, cylinder, sphere, and pyramid. This is a good resource to help introduce and/or review this important skill.",
              "thumbnailUrl": "https://opened.s3.amazonaws.com/pictures/178375/thumb/default.jpg?1359909018",
              "url": "https://www.opened.com/resources/178375?partner_id1&simplifiedView=true",
              "dateCreated": nil,
              "inLanguage": "English", 
              "useRightsUrl": "free", 
              "timeRequired": 130.0, 
              "typicalAgeRange": "K-2", 
              "interactivityType": "expositive", 
              "about": "Unknown/Unknown", 
              "intendedEndUserRole": "student", 
              "educationalUse": "Video", 
              "learningResourceType": "Video", 
              "effectiveness": 100.0
            }
            ]

## Get Resource [/1/resources/{id}.json]

Show specified resource

### GET

+ Parameters

    + id (number, `110710`) - A unique identifier of the resource
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "resource":{
                "id":23145,
                "standard_ids": [1, 2],
                "standard_idents":["K.CC.1","K.CC.4"],
                "grades_range":"K",
                "contribution_name":"WatchKnowLearnCommonCore",
                "publisher":"SamplePublisher",
                "description":"In this classic Sesame Street cartoon, the Bellhop has to find the parents of two lost kids. \u00a0Betty and Bobby Blobby are lost in the lobby.\u00a0",
                "duration":120,
                "resource_type":"video",
                "thumbnails": {
                    "mini":https://opened.s3.amazonaws.com/pictures/110710/thumb/110710.jpg?1377325449",
                    "small":https://opened.s3.amazonaws.com/pictures/110710/thumb/110710.jpg?1377325449",
                    "medium":https://opened.s3.amazonaws.com/pictures/110710/thumb/110710.jpg?1377325449",
                    "large":https://opened.s3.amazonaws.com/pictures/110710/thumb/110710.jpg?1377325449"
                },
                "title":"The Bellhop Counts to 2",
                "share_url":"http://www.opened.io/#/share/110710",
                "student_url":"http://www.opened.io/#/share/110710?student_view=true",
                "rating":3,
                "area_ids":[2],  
                "subject_ids":[18],
                "effectiveness":88,
                "use_rights_url":"https://creativecommons.org/licenses"
            }
        }

## Create Resource [/1/resources]

Create a resource in the OpenEd catalog.

### Create [POST]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

    + Attributes
  
        + url (required,string) - where is the resource hosted
        + title (required,string) - what do you want to call the resource. It doesn't have to match what you have on your site
        + description (required, string) - more information about the resource. You are strongly urged to supply a description as it helps the OpenEd recommendation engine highlight your resources
        + standard_idents (optional,string) - comma-separated list of standard identifiers aligned to the resource. You do not have to supply this. OpenEd will attempt to determine alignments once your resource is contributed
        + subject (optional, string) - the list of subjects (from the OpenEd area/subject taxonomy describe below) associated with the resource
        + grades_range (optional,string) - in the form "lowgrade-highgrade", e.g. "K-4" where "K" must be capitalized
        + publisher (optional,string) - your site as the publisher so we can give you credit. Defaults to OAuth username.
        + resource_type (required,string) - Either "video", "game", "assessment", "homework" or "other". Default to "other" if it is not identified as a video
        + rating (optional,string) - The rating of the resource on a scale of "1" to "5" if you have one on your site
        + image (optional,string) - An image that acts as a preview of the video. When possible with other resource types thumbnails are encouraged. This is a URL link.
        + contribution_name (optional, string) - the place where the resource was contributed from. Not neccessarily the publisher.


+ Response 200

        {
            "notice": "Resource was added successfully",
            "id": 1
        }
        
## Update Resource [/1/resources/{id}]

Update an existing resource in the OpenEd catalog.

### Update [PUT]

+ Parameters
    + id: `34521` (required, number) - the existing resource id

+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN
            

    + Attributes
        + url (required,string) - where is the resource hosted
        + title (required,string) - what do you want to call the resource. It doesn't have to match what you have on your site
        + description (required, string) - more information about the resource. You are strongly urged to supply a description as it helps the OpenEd recommendation engine highlight your resources
        + standard_idents (optional,string) - comma-separated list of standard identifiers aligned to the resource. You do not have to supply this. OpenEd will attempt to determine alignments once your resource is contributed
        + subject (optional, string) - the list of subjects (from the OpenEd area/subject taxonomy describe below) associated with the resource
        + grades_range (optional,string) - in the form "lowgrade-highgrade", e.g. "K-4" where "K" must be capitalized
        + publisher (optional,string) - your site as the publisher so we can give you credit. Defaults to OAuth username.
        + resource_type (required, string) - Either "video", "game", "assessment", "homework" or "other". Default to "other" if it is not identified as a video
        + rating (optional,string) - The rating of the resource on a scale of "1" to "5" if you have one on your site
        + image (optional,string) - An image that acts as a preview of the video. When possible with other resource types thumbnails are encouraged. This is a URL link.
        + contribution_name (optional, string) - the place where the resource was contributed from. Not neccessarily the publisher.


+ Response 200

        {
            "notice": "Resource was updated successfully"
        }

# Group Standards

OpenEd also allows you to search for information on the standards themselves (in addition to finding resources for standards).
Standards are organized into "standard groups" such as "Common Core Math" and "Common Core Language Arts".
Within a standard group there are "grade groups" such as "Elementary" and "Middle School".
Each grade group has a set of "categories" (sometimes known as "strands"), such as "Geometry".
Within categories there are individual standards. This method of organizing standards was created by the Common Core State Standards,
but we use it to structure all standard groups.

## Standard Groups [/1/standard_groups.json]
To navigate the standards hierarchies you first need to get the list of standard groups.

### GET

Retrieve full list of standard groups

+ Request

    + Headers
    
            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "standard_groups": [
                {
                    "id": 4,
                    "title": "Common Core Math",
                    "grades_range": "K-12",
                    "area_id": 1
                },
                {
                    "id": 2,
                    "title": "Common Core Language Arts",
                    "grades_range": "K-12",
                    "area_id": 2
                }
            ],
            "meta": {
                "pagination": {
                    "offset": 0,
                    "total_entries": 2,
                    "entries": 2,
                    "limit": 50
                }
            }
        }

## Get Standard Group [/1/standard_groups/{id}.json]

Show specified standard group

### GET

+ Parameters

    + id (number, `4`) - A unique identifier of the standard group
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "standard_group": {
                "id": 4,
                "title": "Common Core Math",
                "grades_range": "K-12",
                "area_id": 1
            }
        }

## Grade Groups [/1/grade_groups.json{?standard_group,ids}]

List grade groups for specified standard group

### GET

Get the list of grade groups, typically for a particular standard group.

+ Parameters
    + standard_group: `2` (optional, number) - The id of the standard group you want grade groups for.

+ Request

    + Headers
    
            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "grade_groups": [
               {
                  "id": 46,
                  "title": "Elementary",
                  "grades_range": "K-5",
                  "standard_group_ids": [2,4]
               },
               {
                  "id": 47,
                  "title": "Middle School",
                  "grades_range": "6-8",
                  "standard_group_ids": [2,4]
               },
               {
                  "id": 48,
                  "title": "High School",
                  "grades_range": "9-12",
                  "standard_group_ids": [2]
               }
            ],
            "meta": {
                "pagination": {
                    "offset": 0,
                    "total_entries": 3,
                    "entries": 3,
                    "limit": 50
                }
            }
        }

## Get Grade Group [/1/grade_groups/{id}.json]

Show specified grade group

### GET

+ Parameters

    + id (number, `46`) - A unique identifier of the grade group
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "grade_group": {
                "id": 46,
                "title": "Elementary",
                "grades_range": "K-5",
                "standard_group_ids": [2,4]
            }
        }

## Categories [/1/categories.json{?standard_group,grade_group}]

### GET
You can list the categories (also known as "strands") based on several criteria.
It will also return a count of resources.

+ Parameters
    + standard_group: `2` (requir, number) - shows all categories within a standard group.
    + grade_group: `46` (optional, number) - restricts the categories to those associated with a specific grade group.

+ Request

    + Headers
    
            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "categories": [
                {
                    "id": 115,
                    "title": "Geometry (Elementary)",
                    "standard_group_id": 4,
                    "grade_group_id": 46,
                    "grades_range": "K-5"
                },
                {
                    "id": 121,
                    "title": "Functions",
                    "standard_group_id": 4,
                    "grade_group_id": 47,
                    "grades_range": "8"
                },
                {
                    "id": 125,
                    "title": "The Number System",
                    "standard_group_id": 4,
                    "grade_group_id": 47,
                    "grades_range": "6-8"
                }
            ],
            "meta": {
                "pagination": {
                    "offset": 0,
                    "total_entries": 3,
                    "entries": 3,
                    "limit": 50
                }
            }
        }

## Get Category [/1/categories/{id}.json]

Show specified category

### GET

+ Parameters

    + id (number, `115`) - A unique identifier of the category
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "category": {
                "id": 115,
                "title": "Geometry (Elementary)",
                "standard_group_id": 4,
                "grade_group_id": 46,
                "grades_range": "K-5"
            }
        }

## Standards [/1/standards.json{?category,grades_range}]

### GET

Get the list of standards with the number of aligned resources based on parameters:

+ Parameters
    
    + category: `256` (required, number) - standards for a given standard category.
    + grades_range: `K-5` (optional, string) - just the standards relevant to a given grades range, generally combined with standard group or grade group.

+ Response 200 (application/json; charset=utf-8)

        {
            "standards": [
                {
                    "id": 21461,
                    "identifier": "K.CC.1",
                    "title": "Count to 100 by ones and by tens.",
                    "category_id": 115,
                    "grades_range": "2"
                },
                {
                    "id": 20916,
                    "identifier": "K.CC.2",
                    "title": "Count forward beginning from a given number within the known sequence (instead of having to begin at 1).",
                    "category_id": 115,
                    "grades_range": "2"
                },
                {
                    "id": 20917,
                    "identifier": "K.CC.3",
                    "title": "Write numbers from 0 to 20. Represent a number of objects with a written numeral 0-20 (with 0 representing a count of no objects).",
                    "category_id": 115,
                    "grades_range": "2"
                }
            ],
            "meta": {
                "pagination": {
                    "offset": 0, 
                    "total_entries": 3,
                    "entries": 3,
                    "limit": 50
                }
            }
        }

## Get Standard [/1/standards/{id}.json]

Show specified standard

### GET

+ Parameters

    + id (number, `21461`) - A unique identifier of the standards
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "standard": {
                "id": 21461,
                "identifier": "K.CC.1",
                "title": "Count to 100 by ones and by tens.",
                "category_id": 115,
                "grades_range": "2"
            }
        }

# Group Area / Subject Taxonomy

OpenEd categorizes all resources in an area/subject taxonomy. The top level is areas, such as Math and Language Arts. The next level is subject, such as Geometry or Writing.

##  Areas [/1/areas.json]

### GET

+ Request

    + Headers
    
            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "areas": [
                {
                    "id": 1,
                    "title": "Mathematics",
                    "grades_range": "K-12"
                },
                {
                    "id": 2,
                    "title": "Language Arts",
                    "grades_range": "K-12"
                }
            ],
            "meta": {
                "pagination": {
                    "offset": 0,
                    "total_entries": 2,
                    "entries": 2,
                    "limit": 50
                }
            }
        }

## Get Area [/1/areas/{id}.json]

Show specified area

### GET

+ Parameters

    + id (number, `1`) - A unique identifier of the area
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "area": {
                "id": 1,
                "title": "Mathematics",
                "grades_range": "K-12"
            }
        }
        
## Subjects [/1/subjects.json{?area}]

### GET

Get the list of subjects based on supplied area

+ Parameters
    + area: `1` (required,number) - the area you want subjects for.

+ Request

    + Headers
    
            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "subjects": [
                {
                    "id": 7,
                    "title": "Functions",
                    "area_id": 1,
                    "grades_range": ""
                },
                {
                    "id": 4,
                    "title": "Trigonometry",
                    "area_id": 1,
                    "grades_range": ""
                },
                {
                    "id": 8,
                    "title": "Expressions, Equations and Inequalities",
                    "area_id": 1,
                    "grades_range": ""
                }
            ],
            "meta": {
                "pagination": {
                    "offset": 0,
                    "total_entries": 3,
                    "entries": 3,
                    "limit": 50
                }
            }
        }

## Get Subject [/1/subjects/{id}.json]

Show specified subject

### GET

+ Parameters

    + id (number, `7`) - A unique identifier of the subject
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "subject": {
                "id": 7,
                "title": "Functions",
                "area_id": 1,
                "grades_range": ""
            }
        }
        
# Group Publisher

## Publishers [/1/publishers.json]

### GET

Retrieve list of publishers

+ Request

    + Headers
    
            Authorization: Bearer TOKEN
        
+ Response 200 (application/json; charset=utf-8)

        {
            "publishers": [
                {
                    "id":32539,
                    "title":"Smithsonian Institution",
                    "count":1000,
                    "featured":true
                },
                {
                    "id":32539,
                    "title":"Sample Publisher",
                    "count":2,
                    "featured":false
                }
            ]
        }

## Get Publisher [/1/publisher/{id}.json]

Show specified publisher

### GET

+ Parameters

    + id (number, `32539`) - A unique identifier of the publisher
        
+ Request (application/json)

    + Headers
    
            Authorization: Bearer TOKEN

   

+ Response 200 (application/json; charset=utf-8)

        {
            "publisher": {
                "id":32539,
                "title":"Smithsonian Institution",
                "count":1000,
                "featured":true
            }
        }
        

# Group Manage teacher's classes and students

Partner's API endpoint is https://partner.opened.com/

## Teacher's Classes [/1/teachers/classes]

`/teachers/classes` endpoint available for teachers only

### List classes [GET /1/teachers/classes{?ids}]

The request should have the OAuth access token in the headers `Authorization: Bearer [TOKEN]`

Response contains list of side-loaded objects:

+ classes - An array of Class objects.
+ owners - An array of Owner (user) objects -- Class Owners.
+ standard_areas - An array of StandardArea objects.
+ students - An array of Student (user) objects in Classes.

+ Parameters
    + ids (optional, array[int]) - list of class `id`

+ Request

    + Headers

            Authorization: Bearer TOKEN

+ Response 200 (application/json; charset=utf-8)

        {
            "classes": [
                {
                    "id": 4812,
                    "title": "Grade 5",
                    "created_at": "2015-09-18T22:30:03.142Z",
                    "student_ids": [],
                    "standard_area_ids": [],
                    "grades_range": "5",
                    "owner_id": 16370
                }
            ],
            "owners": [
                {
                    "id": 16370,
                    "first_name": "Leonid",
                    "last_name": "Morozov",
                    "username": "leonid.morozov"
                }
            ],
            "standard_areas": [],
            "students": []
        }

### Get Class [GET /1/teachers/classes/{class_id}]

The request should have the OAuth access token in the headers `Authorization: Bearer TOKEN`

Response contains list of side-loaded objects:

+ class - Class object.
+ owners - An array of Owner (user) objects -- Class Owners.
+ standard_areas - An array of StandardArea objects.
+ students - An array of Student (user) objects in Class.

+ Parameters
    + class_id (required, number, `1`) - Class `id`

+ Request

    + Headers

            Authorization: Bearer [TOKEN]

+ Response 200 (application/json; charset=utf-8)

        {
            "class": {
                "id": 4812,
                "title": "Grade 5",
                "created_at": "2015-09-18T22:30:03.142Z",
                "student_ids": [],
                "standard_area_ids": [],
                "grades_range": "5",
                "owner_id": 16370
            },
            "owners": [
                {
                    "id": 16370,
                    "first_name": "Leonid",
                    "last_name": "Morozov",
                    "username": "leonid.morozov"
                }
            ],
            "standard_areas": [],
            "students": []
        }

### Create a New Class [POST /1/teachers/classes]

You may create your own class using this action. It takes a JSON object containing a title and grades_range.
+ title (string) - The class title, required
+ grades_range (string) - class grades_range, optional, in formats: '5', '5-5', '6-8'
+ teacher_id (integer) - teacher id to create class on

+ Request (application/json)
    + Attributes
        + user (object, required) - title (string), grades_range (string)
            + title (string) - The class title, required
            + grades_range (string) - class grades_range, optional, in formats: '5', '5-5', '6-8'
             + teacher_id - teacher id to create class on
             
    + Headers

            Authorization: Bearer [TOKEN]


+ Response 201 (application/json)

    + Body

            {
                "class": {
                    "id": 4812,
                    "title": "My class",
                    "created_at": "2015-09-18T22:30:03.142Z",
                    "student_ids": [],
                    "standard_area_ids": [],
                    "grades_range": "5",
                    "owner_id": 16370
                },
                "owners": [
                    {
                        "id": 16370,
                        "first_name": "Leonid",
                        "last_name": "Morozov",
                        "username": "leonid.morozov"
                    }
                ],
                "standard_areas": [],
                "students": []
            }


### Update Class [PUT /1/teachers/classes/{class_id}]

You may update your own class using this action. It takes a JSON object containing a title and grades_range.

+ title (string) - The class title, optional
+ grades_range (string) - class grades_range, optional, in formats: '5', '5-5', '6-8'

Response contains list of side-loaded objects as on `get class` request.

+ Parameters
    + class_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

    + Body

            {
                "class": {
                    "title": "My class new title",
                    "grades_range": "6-8"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "class": {
                    "id": 4812,
                    "title": "My class new title",
                    "created_at": "2015-09-18T22:30:03.142Z",
                    "student_ids": [],
                    "standard_area_ids": [],
                    "grades_range": "6-8",
                    "owner_id": 16370
                },
                "owners": [
                    {
                        "id": 16370,
                        "first_name": "Leonid",
                        "last_name": "Morozov",
                        "username": "leonid.morozov"
                    }
                ],
                "standard_areas": [],
                "students": []
            }


### Remove a Class [DELETE /teachers/classes/{class_id}]

You may delete your own class using this action.

+ Parameters
    + class_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

+ Response 204

### Add existing students to the Class [POST /1/teachers/classes/{class_id}/add_students]

This allows you to manage existing students in the classes.
Use `create student` action to create new students and add them to classes.

+ Parameters
    + class_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

    + Body

            {
                "student_ids": [16372]
            }

+ Response 200 (application/json)

    + Body

            {
                "class": {
                    "id": 4812,
                    "title": "My class new title",
                    "created_at": "2015-09-18T22:30:03.142Z",
                    "student_ids": [],
                    "standard_area_ids": [],
                    "grades_range": "6-8",
                    "owner_id": 16370
                },
                "owners": [
                    {
                        "id": 16370,
                        "first_name": "Leonid",
                        "last_name": "Morozov",
                        "username": "leonid.morozov"
                    }
                ],
                "standard_areas": [],
                "students": [
                    {
                        "id":16371,
                        "first_name":"Student",
                        "last_name":"1",
                        "username":"student1",
                        "password":"password"
                    },
                    {
                        "id":16372,
                        "first_name":"New Student",
                        "last_name":"1",
                        "username":"student2",
                        "password":"password2"
                    }
                ]
            }


### Remove students from the Class [POST /1/teachers/classes/{class_id}/remove_students]

+ Parameters
    + class_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

    + Body

            {
                "student_ids": [16372]
            }

+ Response 200 (application/json)

    + Body

            {
                "class": {
                    "id": 4812,
                    "title": "My class new title",
                    "created_at": "2015-09-18T22:30:03.142Z",
                    "student_ids": [],
                    "standard_area_ids": [],
                    "grades_range": "6-8",
                    "owner_id": 16370
                },
                "owners": [
                    {
                        "id": 16370,
                        "first_name": "Leonid",
                        "last_name": "Morozov",
                        "username": "leonid.morozov"
                    }
                ],
                "standard_areas": [],
                "students": [
                    {
                        "id":16371,
                        "first_name":"Student",
                        "last_name":"1",
                        "username":"student1",
                        "password":"password"
                    }
                ]
            }


## Teacher's Students [/1/teachers/students]

`/teachers/students` endpoint available for teachers only

### List students [GET /1/teachers/students{?ids}]

The request should have the OAuth access token in the headers `Authorization: Bearer [TOKEN]`

Response contains objects:

+ students - An array of Student (user) objects.

+ Parameters
    + ids (optional, array[int]) - list of student `id`

+ Request

    + Headers

            Authorization: Bearer [TOKEN]

+ Response 200 (application/json; charset=utf-8)

        {
            "students":[
                {
                    "id":16371,
                    "first_name":"Student",
                    "last_name":"1",
                    "username":"student1",
                    "password":"password",
                    "class_ids":[4812]
                },
                {
                    "id":16372,
                    "first_name":"New Student",
                    "last_name":"1",
                    "username":"student2",
                    "password":"password2",
                    "class_ids":[4812]
                }
            ]
        }

### Get Student [GET /1/teachers/students/{student_id}]

The request should have the OAuth access token in the headers `Authorization: Bearer [TOKEN]`

Response contain object:

+ student - Student (user) object.

+ Parameters
    + student_id (required, number, `1`) - Student `id`

+ Request

    + Headers

            Authorization: Bearer [TOKEN]

+ Response 200 (application/json; charset=utf-8)

        {
            "student":{
                "id":16372,
                "first_name":"New Student",
                "last_name":"1",
                "username":"student2",
                "password":"password2",
                "class_ids":[4812]
            }
        }

### Create a Student [POST /1/teachers/students]

You may create your own student and add it to classes using this action. It takes a JSON object containing a first_name, last_name, username, password and list of class IDs.

+ first_name (string) - Student's first_name, required
+ last_name (string) - Student's last_name, required
+ username (string) - Student's username, required
+ password (string) - Student's password, required
+ class_ids (array[int]) - ids of classes new student needs to be added, optional

Response contains list of side-loaded objects as an `get student` request.

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

    + Body

            {
                "student":{
                    "first_name":"Student",
                    "last_name":"2",
                    "username":"student2",
                    "password":"password",
                    "class_ids":[4812]
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "student":{
                    "id":16372,
                    "first_name":"Student",
                    "last_name":"2",
                    "username":"student2",
                    "password":"password",
                    "class_ids":[4812]
                }
            }


### Update Student [PUT /1/teachers/students/{student_id}]

You may update your own student using this action. It takes a JSON object containing a first_name, last_name and password.

+ first_name (string) - Student's first_name, required
+ last_name (string) - Student's last_name, required
+ password (string) - Student's password, required

Response contains list of side-loaded objects as on `get student` request.

+ Parameters
    + student_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

    + Body

            {
                "student":{
                    "first_name":"New Student",
                    "last_name":"1",
                    "password":"password2"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "student":{
                    "id":16372,
                    "first_name":"New Student",
                    "last_name":"1",
                    "username":"student2",
                    "password":"password2",
                    "class_ids":[4812]
                }
            }



### Remove a Student [DELETE /1/teachers/students/{student_id}]

You may delete your own student using this action.

+ Parameters
    + student_id (required, number, `1`) - Class `id`

+ Request (application/json)

    + Headers

            Authorization: Bearer [TOKEN]

+ Response 204

# Group School

## Create a School [/1/schools]

### Create [POST]

You can create schools to be used later with user accounts.  These schools must be created with the NCES ID and school name. You can also specify the school's address, grade range and phone number.

+ Request (application/json)


  + Attributes
        + nces_id: school's NCES ID (required)
        + name: school's name (required)
        + address: school's address (string, optional)
        + city: school's city (string, optional)
        + state: school's state (string, optional)
        + zip: school's zip code (string, optional)
        + phone: school's phone number (string, optional)
        + low_grade: school's minimal grade (string, optional)
        + high_grade: school's maximum grade (string, optional)
       
  + Headers 
  
            Authorization: Bearer [TOKEN]
        
+ Response 200

        {
            "school":{
                "id":65945, 
                "name":"Example Middle", 
                "nces_id":"111111", 
                "low_grade":"6", 
                "high_grade":"8", 
                "phone":"1-555-400-5555", 
                "address":"100 First st.",
                "city":"San Jose", 
                "state":"CA", 
                "zip":"99999"
            }
        } 

+ Response 422

        {
            "error": "error message"
        }

# Group Examples
###[Roster Upload](https://github.com/openedinc/oneroster/blob/master/opened/1r-oe.rb)
###[Resource Search](https://github.com/openedinc/opened-api-consumer)
###[Manage Classes and Students](https://github.com/openedinc/class-roster-sample)
    

# Group API Commons

## Manifest

Here is the API Commons Manifest for the OpenEd API.

    {
        "apis": [
            {
                "name": "OpenEd API",
                "description": "Search for resources for standards or by topic.  Get information on standards.  Get information on our area/subject taxonomy of resources.",
                "image": "https://pbs.twimg.com/profile_images/378800000580251314/04fe1856596c096c1b5da337946aba45_bigger.png",
                "keywords": "ed tech, resources, videos, games, K-12, flipped classroom, Common Core",
                "license": "http://opensource.org/licenses/MIT",
                "attribution": "OpenEd, Inc.",
                "url": "http://docs.opened.apiary.io",
                "definitions": [
                    {
                        "type": "[API Blueprint]",
                        "url": "https://github.com/apiaryio/api-blueprint"
                    }
                ]
            }
        ],
        "tags": "api-commons-manifest",
        "updated": "11/30/2013"
    }